generator client {
  provider      = "prisma-client-js"
  output        = "../generated/client"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  timeZone      String?   @default("Europe/London")
  role          UserRole  @default(user)
  banned        Boolean   @default(false)
  banReason     String?
  banExpires    DateTime?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  gameServers   GameServer[]

  @@unique([email])
  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Railway {
  id          String   @id @default("railway_config")
  accessToken String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("railway")
}

model Game {
  id                String   @id @default(cuid())
  displayName       String
  defaultPort       Int
  protocol          Protocol
  railwayTemplateId String

  servers GameServer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("games")
}

model GameServer {
  id   String @id @default(cuid())
  name String

  game   Game   @relation(fields: [gameId], references: [id])
  gameId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  railwayServiceId String?
  railwayProjectId String?
  railwayUrl       String?

  enabled Boolean @default(true)

  // Relations
  connections GameServerConnection[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("game_servers")
}

model GameServerConnection {
  id String @id @default(cuid())

  serverId String
  server   GameServer @relation(fields: [serverId], references: [id], onDelete: Cascade)

  domain    String? 
  proxyPort Int   

  name      String? 
  enabled   Boolean @default(true)
  isDefault Boolean @default(false) 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([domain, proxyPort])
  @@index([serverId])
  @@map("game_server_connections")
}

enum UserRole {
  user
  admin
}

enum Protocol {
  TCP
  UDP

  @@map("protocol")
}
